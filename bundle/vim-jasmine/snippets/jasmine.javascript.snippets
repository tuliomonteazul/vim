# Describe
snippet d [des] describe("...". function() { ... });
	describe("${1:description}", function() {
		${2}
	});${3}
snippet des
	describe("${1:description}", function() {
		${2}
	});${3}
snippet d [desc] describe("...". function() { beforeEach()... it...});
	describe("${1:when...}", function () {
		beforeEach(function () {
			${2}
		});

		it("${3:should...}", function () {
			expect(${4:condition}).toEqual(${5});
		});
	});
snippet desc
	describe("${1:when...}", function () {
		beforeEach(function () {
			${2}
		});

		it("${3:should...}", function () {
			expect(${4:condition}).toEqual(${5});
		});
	});
snippet i it("...", function() { ... });...
	it("${1:description}", function() {
		${2}
	});${3}
snippet it it("...", function() { ... });...
	it("${1:description}", function() {
		${2}
	});${3}
snippet any
	jasmine.any(${1})
snippet b [bef, before] beforeEach(function() { ... });
	beforeEach(function() {
		${1}
	});
snippet bef
	beforeEach(function() {
		${1}
	});
snippet before
	beforeEach(function () {
		${1}
	});
snippet a [aft, after] afterEach(function() { ... });
	afterEach(function() {
		${1}
	});
snippet aft
	afterEach(function() {
		${1}
	});
snippet after
	afterEach(function () {
		${1}
	});
snippet e [ex] expect(...);...
	expect(${1:target});${2}
snippet ex
	expect(${1:target});${2}
snippet e [expect] expect(...).to...();
	expect(${1}).to${2}();
snippet expect
	expect(${1}).to${2}();
snippet e [notd] expect(...).not.toBeDefined();...
	expect(${1:target}).not.toBeDefined();${2}
snippet notd
	expect(${1:target}).not.toBeDefined();${2}
snippet e [notf] expect(...).to.toBeFalsy();...
	expect(${1:target}).not.toBeFalsy();${2}
snippet notf
	expect(${1:target}).not.toBeFalsy();${2}
snippet e [notn] expect(...).not.toBeNull();...
	expect(${1:target}).not.toBeNull();${2}
snippet notn
	expect(${1:target}).not.toBeNull();${2}
snippet e [nott] expect(...).not.toBeTruthy();...
	expect(${1:target}).not.toBeTruthy();${2}
snippet nott
	expect(${1:target}).not.toBeTruthy();${2}
snippet e [notc] expect(...).not.toContain(...);...
	expect(${1:target}).not.toContain(${2:value});${3}
snippet notc
	expect(${1:target}).not.toContain(${2:value});${3}
snippet e [note] expect(...}).not.toEqual(...);...
	expect(${1:target}).not.toEqual(${2:value});${3}
snippet note
	expect(${1:target}).not.toEqual(${2:value});${3}
snippet e [notm] expect(...).not.toBeDefined();...
	expect(${1:target}).not.toBeDefined();${2}
snippet notm
	expect(${1:target}).not.toBeDefined();${2}
snippet e [notx] expect(...).not;...
	expect(${1:target}).not;${2}
snippet notx
	expect(${1:target}).not;${2}
snippet e [ed] expect(...).toBeDefined();...
	expect(${1:target}).toBeDefined();${2}
snippet ed
	expect(${1:target}).toBeDefined();${2}
snippet e [ef] expect(...).toBeFalsy();...
	expect(${1:target}).toBeFalsy();${2}
snippet ef
	expect(${1:target}).toBeFalsy();${2}
snippet e [en] expect(...).toBeNull();...
	expect(${1:target}).toBeNull();${2}
snippet en
	expect(${1:target}).toBeNull();${2}
snippet e [et] expect(...).toBeTruthy();...
	expect(${1:target}).toBeTruthy();${2}
snippet et
	expect(${1:target}).toBeTruthy();${2}
snippet e [ec] expect(...).toContain(...);...
	expect(${1:target}).toContain(${2:value});${3}
snippet ec
	expect(${1:target}).toContain(${2:value});${3}
snippet e [ee] expect(...).toEqual(...);...
	expect(${1:target}).toEqual(${2:value});${3}
snippet ee
	expect(${1:target}).toEqual(${2:value});${3}
snippet e [em] expect(...).toMatch(...);...
	expect(${1:target}).toMatch(${2:pattern});${3}
snippet em
	expect(${1:target}).toMatch(${2:pattern});${3}
snippet e [escw] expect(...).wasCalledWith(...);...
	expect(${1:target}).wasCalledWith(${2:arguments});${3}
snippet escw
	expect(${1:target}).wasCalledWith(${2:arguments});${3}
snippet e [esc] expect(...).wasCalled();...
	expect(${1:target}).wasCalled();${2}
snippet esc
	expect(${1:target}).wasCalled();${2}
snippet e [notscw] expect(...).wasNotCalledWith(...);...
	expect(${1:target}).wasNotCalledWith(${2:arguments});${3}
snippet notscw
	expect(${1:target}).wasNotCalledWith(${2:arguments});${3}
snippet e [notsc] expect(...).wasNotCalled();...
	expect(${1:target}).wasNotCalled();${3}
snippet notsc
	expect(${1:target}).wasNotCalled();${3}
snippet s [spy] spyOn(..., "...");...
	spyOn(${1:object}, "${2:method}");${3}
snippet s [spy] spyOn(..., "...");
	spyOn(${1:object}, "${2:method}");${3}
snippet spy
	spyOn(${1:object}, "${2:method}");
snippet s [scf] spyOn(..., "...").andCallFake(...);...
	spyOn(${1:object}, "${2:method}").andCallFake(${3:function});${4}
snippet scf
	spyOn(${1:object}, "${2:method}").andCallFake(${3:function});${4}
snippet s [sct] spyOn(..., "...").andCallThrough();...
	spyOn(${1:object}, "${2:method}").andCallThrough();${3}
snippet sct
	spyOn(${1:object}, "${2:method}").andCallThrough();${3}
snippet s [sr] spyOn(..., "...").andReturn(...);...
	spyOn(${1:object}, "${2:method}").andReturn(${3:arguments});${4}
snippet sr
	spyOn(${1:object}, "${2:method}").andReturn(${3:arguments});${4}
snippet s [st] spyOn(..., "...").andThrow(...);...
	spyOn(${1:object}, "${2:method}").andThrow(${3:exception});${4}
snippet st
	spyOn(${1:object}, "${2:method}").andThrow(${3:exception});${4}
snippet m [matcher] to...: function { [init] ... return ...; },
	to${1}: function() {
		var summary = this.actual;
		this.actual = summary.clone().wrap("<div>").parent().html();

		${2}

		return ${3:false};
	},
snippet matcher
	to${1}: function() {
		var summary = this.actual;
		this.actual = summary.clone().wrap("<div>").parent().html();

		${2}

		return ${3:false};
	},
snippet h [helper] beforeEach(function() { this.addMatchers({ [matcher] } })
	beforeEach(function() {
		this.addMatchers({

			to${1}: function() {
				var summary = this.actual;
				this.actual = summary.clone().wrap("<div>").parent().html();

				${2}

				return ${3:false};
			},
		});
	});
snippet helper
	beforeEach(function() {
		this.addMatchers({

			to${1}: function() {
				var summary = this.actual;
				this.actual = summary.clone().wrap("<div>").parent().html();

				${2}

				return ${3:false};
			},
		});
	});
snippet r [ru] runs(function() { ... }); ...
	runs(function() {
		${1}
	});${2}
snippet ru
	runs(function() {
		${1}
	});${2}
snippet w [wa] waits(...);...
	waits(${1});${2}
snippet wa
	waits(${1});${2}
